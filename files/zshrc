export EDITOR="vim"

LC_CTYPE=en_US.UTF-8
LC_ALL=en_US.UTF-8

autoload -Uz compinit 
compinit

HISTSIZE=5000               # How many lines of history to keep in memory
HISTFILE=~/.zsh_history     # Where to save history to disk
SAVEHIST=5000               # Number of history entries to save to disk
HISTDUP=erase               # Erase duplicates in the history file

setopt appendhistory        # Append history to the history file (no overwriting)
setopt sharehistory         # Share history across terminals
setopt incappendhistory     # Immediately append to the history file, not just when a term is killed

source ~/.prompt
source ~/.aliases

if [ -d ~/.kerl ]; then
  source ~/.kerl/installs/18.3/activate
  test -s "$HOME/.kiex/scripts/kiex" && source "$HOME/.kiex/scripts/kiex"
  kiex use 1.5 > /dev/null
fi

if [ -d $HOME/bin ]; then
  export PATH=$PATH:$HOME/bin
fi

if [ -d $HOME/.gem/ruby/2.3.0 ]; then
  export PATH=$PATH:$HOME/.gem/ruby/2.3.0/bin
fi

export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$PATH
export PATH=$GOROOT/bin:$PATH
export PATH="$PATH:/opt/istio-1.0.3/bin"
export PATH="$PATH:/Users/igorsarcevic/Applications/nvim-macos-arm64/bin"
export PATH=$PATH:/opt/homebrew/bin
export GO111MODULE=on

export GPG_TTY=$(tty)
export HOMEBREW_NO_AUTO_UPDATE=1

# if [ -e ~/.gnupg/S.gpg-agent ]
# then
#   exit
# else
#   pkill gpg-agent
#   rm -f ~/.gpg-agent.env
# fi

# env=`gpg-agent --daemon --enable-ssh-support`
# if [ $?==0 ]
# then
#   echo "$env" > ~/.gpg-agent.env
# fi

# gpgconf --create-socketdir

# ~/.gpg-agent
# source ~/.gpg-agent.env

bindkey '^r' history-incremental-search-backward
test -e /home/vagrant/.iterm2_shell_integration.zsh && source /home/vagrant/.iterm2_shell_integration.zsh || true

alias vim=nvim

bindkey "^A" vi-beginning-of-line
bindkey "^E" vi-end-of-line

if [[ -n $TMUX ]]; then
  _fix_ssh_agent_in_tmux () { 
    if [[ ! -S $SSH_AUTH_SOCK ]]; then 
      echo "Fixing ssh-agent in tmux..."
      eval export $(tmux show-env | grep SSH_AUTH_SOCK); 
    fi 
  }

  ssh ()   { _fix_ssh_agent_in_tmux; command ssh $@; }
  scp ()   { _fix_ssh_agent_in_tmux; command scp $@; }
  git ()   { _fix_ssh_agent_in_tmux; command git $@; }
  g ()     { _fix_ssh_agent_in_tmux; command git $@; }
  rsync () { _fix_ssh_agent_in_tmux; command rsync $@; }
else
  g () { command git $@; }
fi

case "$(uname -s)" in
  Darwin)
    ;;
  Linux)
    . /home/dev/.asdf/asdf.sh
    ;;
esac
